{"ast":null,"code":"var _jsxFileName = \"C:\\\\vscode\\\\udemy-react\\\\route-ex\\\\frontend\\\\src\\\\pages\\\\EventsPage.jsx\",\n  _s = $RefreshSig$();\nimport EventsList from \"../components/EventsList\";\nimport { json, useLoaderData } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  console.log(data);\n  const events = data === null || data === void 0 ? void 0 : data.events;\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\n\n//loader코드는 브라우저에서 실행(서버x)\nexport const eventsLoader = async () => {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({ message: \"Fetching events failed.\" }), {\n    //   status: 500,\n    // });\n    throw json({\n      message: \"Fetching events failed.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return json(response);\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","json","useLoaderData","jsxDEV","_jsxDEV","EventsPage","_s","data","console","log","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","eventsLoader","response","fetch","ok","message","status","$RefreshReg$"],"sources":["C:/vscode/udemy-react/route-ex/frontend/src/pages/EventsPage.jsx"],"sourcesContent":["import EventsList from \"../components/EventsList\";\r\nimport { json, useLoaderData } from \"react-router-dom\";\r\n\r\nfunction EventsPage() {\r\n  const data = useLoaderData();\r\n  console.log(data);\r\n  const events = data?.events;\r\n\r\n  return <EventsList events={events} />;\r\n}\r\n\r\nexport default EventsPage;\r\n\r\n//loader코드는 브라우저에서 실행(서버x)\r\nexport const eventsLoader = async () => {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n  if (!response.ok) {\r\n    // throw new Response(JSON.stringify({ message: \"Fetching events failed.\" }), {\r\n    //   status: 500,\r\n    // });\r\n    throw json({ message: \"Fetching events failed.\" }, { status: 500 });\r\n  } else {\r\n    return json(response);\r\n  }\r\n};\r\n"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAASC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGL,aAAa,CAAC,CAAC;EAC5BM,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACjB,MAAMG,MAAM,GAAGH,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEG,MAAM;EAE3B,oBAAON,OAAA,CAACJ,UAAU;IAACU,MAAM,EAAEA;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvC;AAACR,EAAA,CANQD,UAAU;EAAA,QACJH,aAAa;AAAA;AAAAa,EAAA,GADnBV,UAAU;AAQnB,eAAeA,UAAU;;AAEzB;AACA,OAAO,MAAMW,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA,MAAMlB,IAAI,CAAC;MAAEmB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACrE,CAAC,MAAM;IACL,OAAOpB,IAAI,CAACgB,QAAQ,CAAC;EACvB;AACF,CAAC;AAAC,IAAAF,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}