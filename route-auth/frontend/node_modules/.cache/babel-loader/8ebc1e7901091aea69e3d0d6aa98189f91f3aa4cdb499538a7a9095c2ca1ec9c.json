{"ast":null,"code":"var _s = $RefreshSig$();\nimport EventsList from \"../components/EventsList\";\nimport { defer, json, useLoaderData } from \"react-router-dom\";\nfunction EventsPage() {\n  _s();\n  const {\n    event\n  } = useLoaderData();\n  console.log(event);\n  // const events = data?.events;\n  // return <EventsList events={events} />;\n}\n_s(EventsPage, \"aSDW1xvoNF3zHawQylAegsUS6e4=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\n\n//loader코드는 브라우저에서 실행(서버x)\nconst loader = async () => {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({ message: \"Fetching events failed.\" }), {\n    //   status: 500,\n    // });\n    throw json({\n      message: \"Fetching events failed.\"\n    }, {\n      status: 500\n    });\n  } else {\n    // return response;\n    const resData = JSON.parse(response);\n    return resData === null || resData === void 0 ? void 0 : resData.event;\n  }\n};\nexport const eventsLoader = () => {\n  defer({\n    event: loader()\n  });\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","defer","json","useLoaderData","EventsPage","_s","event","console","log","_c","loader","response","fetch","ok","message","status","resData","JSON","parse","eventsLoader","$RefreshReg$"],"sources":["C:/vscode/udemy-react/route-ex/frontend/src/pages/EventsPage.jsx"],"sourcesContent":["import EventsList from \"../components/EventsList\";\r\nimport { defer, json, useLoaderData } from \"react-router-dom\";\r\n\r\nfunction EventsPage() {\r\n  const { event } = useLoaderData();\r\n  console.log(event);\r\n  // const events = data?.events;\r\n  // return <EventsList events={events} />;\r\n}\r\n\r\nexport default EventsPage;\r\n\r\n//loader코드는 브라우저에서 실행(서버x)\r\nconst loader = async () => {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n  if (!response.ok) {\r\n    // throw new Response(JSON.stringify({ message: \"Fetching events failed.\" }), {\r\n    //   status: 500,\r\n    // });\r\n    throw json({ message: \"Fetching events failed.\" }, { status: 500 });\r\n  } else {\r\n    // return response;\r\n    const resData = JSON.parse(response);\r\n    return resData?.event;\r\n  }\r\n};\r\n\r\nexport const eventsLoader = () => {\r\n  defer({\r\n    event: loader(),\r\n  });\r\n};\r\n"],"mappings":";AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAASC,KAAK,EAAEC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AAE7D,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAM,CAAC,GAAGH,aAAa,CAAC,CAAC;EACjCI,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB;EACA;AACF;AAACD,EAAA,CALQD,UAAU;EAAA,QACCD,aAAa;AAAA;AAAAM,EAAA,GADxBL,UAAU;AAOnB,eAAeA,UAAU;;AAEzB;AACA,MAAMM,MAAM,GAAG,MAAAA,CAAA,KAAY;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA,MAAMX,IAAI,CAAC;MAAEY,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACrE,CAAC,MAAM;IACL;IACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACP,QAAQ,CAAC;IACpC,OAAOK,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEV,KAAK;EACvB;AACF,CAAC;AAED,OAAO,MAAMa,YAAY,GAAGA,CAAA,KAAM;EAChClB,KAAK,CAAC;IACJK,KAAK,EAAEI,MAAM,CAAC;EAChB,CAAC,CAAC;AACJ,CAAC;AAAC,IAAAD,EAAA;AAAAW,YAAA,CAAAX,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}